version: 3
tasks:
  run:
    cmd: go run .
  run-debug:
    cmd: go run . --debug
  test:
    cmd: go test -v ./...
  clean:
    cmd: rm -rf ./dist
  tag:
    desc: Create a new version tag and GitHub release with changelog
    cmds:
      - VERSION=$(git cliff --bumped-version) && git tag $VERSION && git push origin $VERSION && git cliff -s all --current
  tag-and-create-release:
    desc: Create a new version tag and GitHub release with changelog
    cmds:
      - VERSION=$(git cliff --bumped-version) && git tag $VERSION && git push origin $VERSION && git cliff -l -s all | gh release create $VERSION --notes-file -
  release:
    cmd: goreleaser release
  check:
    cmds:
      - goreleaser healthcheck
  lint:
    cmd: go tool golangci-lint run
  fmt:
    cmd: go tool gofumpt -l -w .
  tidy:
    cmd: go tool goimports -l -w .
  view-ci:
    cmd: gh run list --json workflowName,status,displayTitle,url,startedAt,createdAt,updatedAt | jq -r '(.[0]|keys_unsorted|(.,map(length*"-"))),.[]|map(.)|@tsv'| column -ts $'\t'
  view-release-ci:
    cmd: |
      gh run list --json workflowName,status,displayTitle,url,startedAt,createdAt,updatedAt  | jq -r '
      # Build a filtered array
      ([.[] | select(.workflowName == "release")] as $filtered |
      # Only output if there is at least one matching record
      if ($filtered | length) > 0 then
      # Generate header from first matching record
      ($filtered[0] | keys_unsorted | (., map(length * "-"))) ,
      # Then output each matching record as TSV
      ($filtered[] | map(.) | @tsv)
      else
      empty
      end)
      ' | column -ts $'\t'

#    select(.workflowName == "release")
#    cmd: gh workflow view release
#  attempt
#  conclusion
#  createdAt
#  databaseId
#  displayTitle
#  event
#  headBranch
#  headSha
#  name
#  number
#  startedAt
#  status
#  updatedAt
#  url
#  workflowDatabaseId
#  workflowName
